import logging
import os

import random
# import requests
from telegram import ReplyKeyboardMarkup
from telegram.ext import CommandHandler, Updater, MessageHandler, Filters

from exceptions import TelegramError
from words import WORDS

from dotenv import load_dotenv

load_dotenv()
secret_token = os.getenv('TELEGRAM_TOKEN')

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO)


def words_esp_rus(update, context):
    """Select a new word for translation."""
    selected_word = random.choice(list(WORDS))

    chat = update.effective_chat
    context.bot.send_message(chat_id=chat.id,
                             text=selected_word)
    # Saves a word provided to the user
    # for further checking of its correctness.
    context.user_data['selected_word'] = selected_word


def check_answer(update, context):
    """Check user's answer and provide feedback."""
    uses_answer = update.message.text
    uses_answer = str.lower(uses_answer)

    correct_answer = WORDS[context.user_data['selected_word']]
    if uses_answer == correct_answer:
        bot_response = '‚úÖ *–í–µ—Ä–Ω–æ*! –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ:'
    else:
        bot_response = ('‚ùå *–ù–µ–≤–µ—Ä–Ω–æ*. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {}.'
                        '\n'
                        '\n–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ:'.format(correct_answer))
    chat = update.effective_chat
    context.bot.send_message(chat_id=chat.id,
                             text=bot_response,
                             parse_mode='Markdown')
    words_esp_rus(update, context)


def wake_up(update, context):
    """Launch Telegram bot."""
    chat = update.effective_chat
    name = update.message.chat.first_name
    button = ReplyKeyboardMarkup([
        ['/ESP_RUS'],
        ['/RUS_ESP'],
        ],
        resize_keyboard=True)

    context.bot.send_message(
        chat_id=chat.id,
        text='–ü—Ä–∏–≤–µ—Ç, {} üññ'
             '\n'
             '–î–∞–≤–∞–π –ø–æ—É–ø—Ä–∞–∂–Ω—è–µ–º—Å—è –≤ –∏—Å–ø–∞–Ω—Å–∫–æ–º! üá™üá¶ '
             '–Ø –±—É–¥—É –ø–∏—Å–∞—Ç—å —Å–ª–æ–≤–æ, –∞ —Ç—ã –±—É–¥–µ—à—å –ø–∏—Å–∞—Ç—å –º–Ω–µ –≤ –æ—Ç–≤–µ—Ç –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥.'
             '\n'
             '\n–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã, –Ω–∞–∂–∞–≤ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:'
             '\n üí° –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –∏—Å–ø–∞–Ω—Å–∫–∏–µ —Å–ª–æ–≤–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π;'
             '\n üí° –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ä—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞ –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–∏–π.'.format(name),
        reply_markup=button
    )


def main():
    """Contain handlers and other basic data."""
    updater = Updater(token=secret_token)

    updater.dispatcher.add_handler(CommandHandler('start', wake_up))
    updater.dispatcher.add_handler(CommandHandler('ESP_RUS',
                                                  words_esp_rus,
                                                  pass_args=True
                                                  ))
    updater.dispatcher.add_handler(MessageHandler(Filters.text, check_answer))

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
